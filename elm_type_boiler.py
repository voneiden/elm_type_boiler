import argparse
import os
import re

re_type_definition = r'type\s+([A-Z][\w]+)\s*=((?:\s*[A-Z][\w]+\s*(?<!\n)[|](?!\s*\n))*(?:\s*[A-Z][\w]+\s*(?:\n|$)))'


def generate_type_list(name, types):
    return [
        f'list : List {name}',
        f'list =',
        f'    [{types[0]}',
        *[f'    ,{t}' for t in types[1:]],
        f'    ]', '', ''
    ]


def generate_to_string(name, types):
    var = name.lower()
    return [
        f'toString : {name} -> String',
        f'toString {var} =',
        f'    case {var} of',
        *[f'        {t} -> "{t}"' for t in types]
    ]


def generate_type_helpers(input_module, output_module, output_folder_path, name, types):
    buffer = [
        '-- Do not edit!',
        '-- This file was generated by elm_type_boiler',
        '',
        f'module {output_module}.{name} exposing (..)',
        f'import {input_module} exposing ({name}(..))'
    ]

    buffer += generate_type_list(name, types)
    buffer += generate_to_string(name, types)

    print("BUFFER", buffer)

    output_file_name = os.path.join(output_folder_path, f'{name}.elm')
    with open(output_file_name, 'w') as f:
        f.write('\n'.join(buffer))


def process(src_root, input_module, output_module):
    input_file_path = os.path.join(src_root, input_module.replace('.', '/') + '.elm')
    output_folder_path = os.path.join(src_root, output_module.replace('.', '/'))

    with open(input_file_path, 'r') as f:
        input_data = f.read()

    for name, raw_types in re.findall(re_type_definition, input_data):
        types = [t.strip() for t in raw_types.split('|')]
        generate_type_helpers(input_module, output_module, output_folder_path, name, types)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('src_root')
    parser.add_argument('input_module')
    parser.add_argument('output_module')
    args = parser.parse_args()
    process(args.src_root, args.input_module, args.output_module)
